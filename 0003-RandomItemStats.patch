From 7fc2f7cc501d0b3ebe6032d3403786605e93ac37 Mon Sep 17 00:00:00 2001
From: Engardium <entaro@live.ru>
Date: Wed, 10 Nov 2021 20:31:00 +0300
Subject: [PATCH] RandomItemStats

---
 src/server/game/Entities/Item/Item.cpp       | 52 +++++++++++++++++++-
 src/server/game/Entities/Item/Item.h         |  9 ++++
 src/server/game/Globals/ObjectMgr.cpp        | 31 ++++++++++++
 src/server/game/Globals/ObjectMgr.h          |  5 ++
 src/server/game/World/IWorld.h               |  4 ++
 src/server/game/World/World.cpp              | 13 +++++
 src/server/worldserver/worldserver.conf.dist | 31 ++++++++++++
 7 files changed, 143 insertions(+), 2 deletions(-)

diff --git a/src/server/game/Entities/Item/Item.cpp b/src/server/game/Entities/Item/Item.cpp
index cb27a9b2e..5e90f76fc 100644
--- a/src/server/game/Entities/Item/Item.cpp
+++ b/src/server/game/Entities/Item/Item.cpp
@@ -1064,8 +1064,56 @@ Item* Item::CreateItem(uint32 item, uint32 count, Player const* player, bool clo
         if (pItem->Create(sObjectMgr->GetGenerator<HighGuid::Item>().Generate(), item, player))
         {
             pItem->SetCount(count);
-            if (!clone)
-                pItem->SetItemRandomProperties(randomPropertyId ? randomPropertyId : Item::GenerateItemRandomPropertyId(item));
+            if (!clone) {
+                //pItem->SetItemRandomProperties(randomPropertyId ? randomPropertyId : Item::GenerateItemRandomPropertyId(item));
+                if (randomPropertyId) pItem->SetItemRandomProperties(randomPropertyId);
+                else
+                {
+                    pItem->SetItemRandomProperties(Item::GenerateItemRandomPropertyId(item));
+
+                    if (sWorld->getBoolConfig(CONFIG_MOD_RANDOM_ITEMSTATS_ENABLE))
+                    {
+                        ItemTemplate const* itemTemplate = pItem->GetTemplate();
+                        if (itemTemplate->Class == ITEM_CLASS_WEAPON || itemTemplate->Class == ITEM_CLASS_ARMOR)
+                        if (itemTemplate->Quality == ITEM_QUALITY_UNCOMMON || itemTemplate->Quality == ITEM_QUALITY_RARE || itemTemplate->Quality == ITEM_QUALITY_EPIC)
+                        if (itemTemplate->InventoryType == INVTYPE_HEAD || itemTemplate->InventoryType == INVTYPE_NECK || itemTemplate->InventoryType == INVTYPE_SHOULDERS || itemTemplate->InventoryType == INVTYPE_CHEST || itemTemplate->InventoryType == INVTYPE_ROBE || itemTemplate->InventoryType == INVTYPE_BODY || itemTemplate->InventoryType == INVTYPE_WAIST || itemTemplate->InventoryType == INVTYPE_LEGS ||
+                            itemTemplate->InventoryType == INVTYPE_FEET || itemTemplate->InventoryType == INVTYPE_WRISTS || itemTemplate->InventoryType == INVTYPE_HANDS || itemTemplate->InventoryType == INVTYPE_FINGER || itemTemplate->InventoryType == INVTYPE_WEAPON || itemTemplate->InventoryType == INVTYPE_SHIELD || itemTemplate->InventoryType == INVTYPE_RANGED ||
+                            itemTemplate->InventoryType == INVTYPE_CLOAK || itemTemplate->InventoryType == INVTYPE_2HWEAPON || itemTemplate->InventoryType == INVTYPE_WEAPONMAINHAND || itemTemplate->InventoryType == INVTYPE_WEAPONOFFHAND || itemTemplate->InventoryType == INVTYPE_RELIC || itemTemplate->InventoryType == INVTYPE_RANGEDRIGHT || itemTemplate->InventoryType == INVTYPE_THROWN)
+                        {
+                            std::map<uint32, uint32> propertiesList;
+                            propertiesList.clear();
+                            uint32 count = 0;
+                            uint32 level = uint32(itemTemplate->ItemLevel / sWorld->getIntConfig(CONFIG_MOD_RANDOM_ITEMSTATS_RATE));
+                            if (itemTemplate->ItemLevel >= sWorld->getIntConfig(CONFIG_MOD_RANDOM_ITEMSTATS_ITEMLEVELUP))
+                                level = uint32(level + ((itemTemplate->ItemLevel - sWorld->getIntConfig(CONFIG_MOD_RANDOM_ITEMSTATS_ITEMLEVELUP)) / 2));
+                            if (level)
+                            {
+                                RandomItemStatsContainer const* riss = sObjectMgr->GetRandomItemStats();
+                                if (itemTemplate->ItemLevel < sWorld->getIntConfig(CONFIG_MOD_RANDOM_ITEMSTATS_ITEMLEVEL))
+                                {
+                                    for (RandomItemStatsContainer::const_iterator itr = riss->begin(); itr != riss->end(); ++itr)
+                                    {
+                                        if (itr->second.Amount <= level)
+                                        {
+                                            propertiesList[count] = itr->second.ID;
+                                            ++count;
+                                        }
+                                    }
+                                }
+                                else
+                                {
+                                    for (RandomItemStatsContainer::const_iterator itr = riss->begin(); itr != riss->end(); ++itr)
+                                    {
+                                        propertiesList[count] = itr->second.ID;
+                                        ++count;
+                                    }
+                                }
+                            }
+                            pItem->SetItemRandomProperties(propertiesList[urand(0, count)]);
+                        }
+                    }
+                }
+            }
             else if (randomPropertyId)
                 pItem->SetItemRandomProperties(randomPropertyId);
             return pItem;
diff --git a/src/server/game/Entities/Item/Item.h b/src/server/game/Entities/Item/Item.h
index 8d42e5e45..d1a9ade06 100644
--- a/src/server/game/Entities/Item/Item.h
+++ b/src/server/game/Entities/Item/Item.h
@@ -35,6 +35,15 @@ struct ItemSetEffect
     SpellInfo const* spells[8];
 };
 
+struct RandomItemStats            // random_item_stats
+ {
+    uint32 ID;                    // id
+    uint32 Count;                // stat_count
+    uint32 Amount;                // stat_amount
+    };
+
+typedef std::unordered_map<uint32, RandomItemStats> RandomItemStatsContainer;
+
 // EnumUtils: DESCRIBE THIS
 enum InventoryResult
 {
diff --git a/src/server/game/Globals/ObjectMgr.cpp b/src/server/game/Globals/ObjectMgr.cpp
index abc7d16ab..08910aaea 100644
--- a/src/server/game/Globals/ObjectMgr.cpp
+++ b/src/server/game/Globals/ObjectMgr.cpp
@@ -470,6 +470,37 @@ void ObjectMgr::LoadPointOfInterestLocales()
     LOG_INFO("server.loading", ">> Loaded %u Points Of Interest Locale strings in %u ms", (uint32)_pointOfInterestLocaleStore.size(), GetMSTimeDiffToNow(oldMSTime));
 }
 
+void ObjectMgr::LoadRandomItemStats()
+{
+    uint32 oldMSTime = getMSTime();
+    //                                                0      1           2
+    QueryResult result = WorldDatabase.Query("SELECT id, stat_count, stat_amount FROM random_item_stats;");
+    if (!result)
+    {
+        return;
+    }
+    _randomItemStatsStore.rehash(result->GetRowCount());
+    uint32 count = 0;
+    do
+    {
+        Field* fields = result->Fetch();
+        LoadRandomItemStats(fields, count);
+        ++count;
+    } while (result->NextRow());
+
+}
+
+void ObjectMgr::LoadRandomItemStats(Field* fields, uint32 count)
+{
+    uint32 entry = fields[0].Get<uint32>();
+
+    RandomItemStats& randomItemStats = _randomItemStatsStore[count];
+
+    randomItemStats.ID = entry;
+    randomItemStats.Count = fields[1].Get<uint32>();
+    randomItemStats.Amount = fields[2].Get<uint32>();
+}
+
 void ObjectMgr::LoadCreatureTemplates()
 {
     uint32 oldMSTime = getMSTime();
diff --git a/src/server/game/Globals/ObjectMgr.h b/src/server/game/Globals/ObjectMgr.h
index e9195e7c5..425d744a8 100644
--- a/src/server/game/Globals/ObjectMgr.h
+++ b/src/server/game/Globals/ObjectMgr.h
@@ -737,11 +737,16 @@ public:
     void LoadGameObjectTemplate();
     void LoadGameObjectTemplateAddons();
     void AddGameobjectInfo(GameObjectTemplate* goinfo);
+	
+	void LoadRandomItemStats();
+    void LoadRandomItemStats(Field* fields, uint32 count);
+    RandomItemStatsContainer _randomItemStatsStore;
 
     CreatureTemplate const* GetCreatureTemplate(uint32 entry);
     [[nodiscard]] CreatureTemplateContainer const* GetCreatureTemplates() const { return &_creatureTemplateStore; }
     CreatureModelInfo const* GetCreatureModelInfo(uint32 modelId);
     CreatureModelInfo const* GetCreatureModelRandomGender(uint32* displayID);
+	RandomItemStatsContainer const* GetRandomItemStats() const { return &_randomItemStatsStore; }
     static uint32 ChooseDisplayId(CreatureTemplate const* cinfo, CreatureData const* data = nullptr);
     static void ChooseCreatureFlags(CreatureTemplate const* cinfo, uint32& npcflag, uint32& unit_flags, uint32& dynamicflags, CreatureData const* data = nullptr);
     EquipmentInfo const* GetEquipmentInfo(uint32 entry, int8& id);
diff --git a/src/server/game/World/IWorld.h b/src/server/game/World/IWorld.h
index b404541e6..538d9d109 100644
--- a/src/server/game/World/IWorld.h
+++ b/src/server/game/World/IWorld.h
@@ -69,6 +69,7 @@ enum ServerMessageType
 enum WorldBoolConfigs
 {
     CONFIG_DURABILITY_LOSS_IN_PVP = 0,
+	CONFIG_MOD_RANDOM_ITEMSTATS_ENABLE,
     CONFIG_ADDON_CHANNEL,
     CONFIG_ALLOW_PLAYER_COMMANDS,
     CONFIG_CLEAN_CHARACTER_DB,
@@ -195,6 +196,9 @@ enum WorldFloatConfigs
 enum WorldIntConfigs
 {
     CONFIG_COMPRESSION = 0,
+	CONFIG_MOD_RANDOM_ITEMSTATS_RATE,
+    CONFIG_MOD_RANDOM_ITEMSTATS_ITEMLEVELUP,
+    CONFIG_MOD_RANDOM_ITEMSTATS_ITEMLEVEL,
     CONFIG_INTERVAL_MAPUPDATE,
     CONFIG_INTERVAL_CHANGEWEATHER,
     CONFIG_INTERVAL_DISCONNECT_TOLERANCE,
diff --git a/src/server/game/World/World.cpp b/src/server/game/World/World.cpp
index 35f69e7ed..5ea0f2b16 100644
--- a/src/server/game/World/World.cpp
+++ b/src/server/game/World/World.cpp
@@ -91,6 +91,7 @@
 #include "WorldSession.h"
 #include <boost/asio/ip/address.hpp>
 #include <cmath>
+#include "Item.h"
 
 #ifdef ELUNA
 #include "LuaEngine.h"
@@ -1363,6 +1364,12 @@ void World::LoadConfigSettings(bool reload)
 
     m_bool_configs[CONFIG_IP_BASED_ACTION_LOGGING] = sConfigMgr->GetOption<bool>("Allow.IP.Based.Action.Logging", false);
 
+    // Mod Random Items Stats
+    m_bool_configs[CONFIG_MOD_RANDOM_ITEMSTATS_ENABLE] = sConfigMgr->GetBoolDefault("Random.ItemStats.Enable", true);
+    m_int_configs[CONFIG_MOD_RANDOM_ITEMSTATS_RATE] = sConfigMgr->GetIntDefault("Random.ItemStats.Rate", 10);
+    m_int_configs[CONFIG_MOD_RANDOM_ITEMSTATS_ITEMLEVEL] = sConfigMgr->GetIntDefault("Random.ItemStats.ItemLevel", 250);
+    m_int_configs[CONFIG_MOD_RANDOM_ITEMSTATS_ITEMLEVELUP] = sConfigMgr->GetIntDefault("Random.ItemStats.ItemLevelUp", 200);
+
     // Whether to use LoS from game objects
     m_bool_configs[CONFIG_CHECK_GOBJECT_LOS] = sConfigMgr->GetOption<bool>("CheckGameObjectLoS", true);
 
@@ -1956,6 +1963,12 @@ void World::SetInitialWorldSettings()
 
     LOG_INFO("server.loading", "Loading Calendar data...");
     sCalendarMgr->LoadFromDB();
+	
+    if (sWorld->getBoolConfig(CONFIG_MOD_RANDOM_ITEMSTATS_ENABLE))
+    {
+        //sLog->outString("Loading Random Item Stats...");
+        sObjectMgr->LoadRandomItemStats();
+    }
 
     LOG_INFO("server.loading", "Initializing SpellInfo precomputed data..."); // must be called after loading items, professions, spells and pretty much anything
     LOG_INFO("server.loading", " ");
diff --git a/src/server/worldserver/worldserver.conf.dist b/src/server/worldserver/worldserver.conf.dist
index 0d21fe7dc..7be6443fd 100644
--- a/src/server/worldserver/worldserver.conf.dist
+++ b/src/server/worldserver/worldserver.conf.dist
@@ -3777,6 +3777,37 @@ Logger.sql=4,Console Server
 #Logger.weather=4,Console Server
 ###################################################################################################
 
+###################################################################################################
+#    Random Item Stats config
+###################################################################################################
+#
+#    SETTINGS
+#
+#    Random.ItemStats.Enable
+#        Description: Enables / Disables mod
+#        Default:    1
+#
+#    Random.ItemStats.Rate
+#        Description: The number of levels, for which the object gives one state
+#        Default:    10
+#
+#    Random.ItemStats.ItemLevel
+#        Description: Item level, after which all articles are randomly
+#        Default:    250
+#
+#    Random.ItemStats.ItemLevelUp
+#        Description: Item level, followed by a sharp increase in performance
+#        Default:    200
+#
+
+Random.ItemStats.Enable = 1
+Random.ItemStats.Rate = 10
+Random.ItemStats.ItemLevel = 250
+Random.ItemStats.ItemLevelUp = 200
+
+#
+###################################################################################################
+
 ###################################################################################################
 # PACKET SPOOF PROTECTION SETTINGS
 #
-- 
2.33.0.windows.2

